#ifndef ERROR_H
#define ERROR_H

#include <hj/testing/error.hpp>
#include <hj/util/init.hpp>
#include <hj/util/once.hpp>
#include <iostream>

namespace livermore::ctp
{

using err_t           = std::error_code;
static const err_t OK = err_t();

// NOTE: generated by CHATGPT
INIT_ONCE(
    // register ctp error codes start (from error.xml)
    // hj::register_err("ctp", 1, "CTP:不在已同步状态");
    // hj::register_err("ctp", 2, "CTP:会话信息不一致");
    // hj::register_err("ctp", 3, "CTP:不合法的登录");
    // hj::register_err("ctp", 4, "CTP:用户不活跃");
    // hj::register_err("ctp", 5, "CTP:重复的登录");
    // hj::register_err("ctp", 6, "CTP:还没有登录");
    // hj::register_err("ctp", 7, "CTP:还没有初始化");
    // hj::register_err("ctp", 8, "CTP:前置不活跃");
    // hj::register_err("ctp", 9, "CTP:无此权限");
    // hj::register_err("ctp", 10, "CTP:修改别人的口令");
    // hj::register_err("ctp", 11, "CTP:找不到该用户");
    // hj::register_err("ctp", 12, "CTP:找不到该经纪公司");
    // hj::register_err("ctp", 13, "CTP:找不到投资者");
    // hj::register_err("ctp", 14, "CTP:原口令不匹配");
    // hj::register_err("ctp", 15, "CTP:报单字段有误");
    // hj::register_err("ctp", 16, "CTP:找不到合约");
    // hj::register_err("ctp", 17, "CTP:合约不能交易");
    // hj::register_err("ctp", 18, "CTP:经纪公司不是交易所的会员");
    // hj::register_err("ctp", 19, "CTP:投资者不活跃");
    // hj::register_err("ctp", 20, "CTP:投资者未在交易所开户");
    // hj::register_err("ctp", 21, "CTP:该交易席位未连接到交易所");
    // hj::register_err("ctp", 22, "CTP:报单错误：不允许重复报单");
    // hj::register_err("ctp", 23, "CTP:错误的报单操作字段");
    // hj::register_err("ctp", 24, "CTP:撤单已报送，不允许重复撤单");
    // hj::register_err("ctp", 25, "CTP:撤单找不到相应报单");
    // hj::register_err("ctp", 26, "CTP:报单已全成交或已撤销，不能再撤");
    // hj::register_err("ctp", 27, "CTP:不支持的功能");
    // hj::register_err("ctp", 28, "CTP:没有报单交易权限");
    // hj::register_err("ctp", 29, "CTP:只能平仓");
    // hj::register_err("ctp", 30, "CTP:平仓量超过持仓量");
    // hj::register_err("ctp", 31, "CTP:资金不足");
    // hj::register_err("ctp", 32, "CTP:主键重复");
    // hj::register_err("ctp", 33, "CTP:找不到主键");
    // hj::register_err("ctp", 34, "CTP:设置经纪公司不活跃状态失败");
    // hj::register_err("ctp", 35, "CTP:经纪公司正在同步");
    // hj::register_err("ctp", 36, "CTP:经纪公司已同步");
    // hj::register_err("ctp", 37, "CTP:现货交易不能卖空");
    // hj::register_err("ctp", 38, "CTP:不合法的结算引用");
    // hj::register_err("ctp", 39, "CTP:交易所网络连接失败");
    // hj::register_err("ctp", 40, "CTP:交易所未处理请求超过许可数");
    // hj::register_err("ctp", 41, "CTP:交易所每秒发送请求数超过许可数");
    // hj::register_err("ctp", 42, "CTP:结算结果未确认");
    // hj::register_err("ctp", 43, "CTP:没有对应的入金记录");
    // hj::register_err("ctp", 44, "CTP:交易所已经进入连续交易状态");
    // hj::register_err("ctp", 45, "CTP:找不到预埋（撤单）单");
    // hj::register_err("ctp", 46, "CTP:预埋（撤单）单已经发送");
    // hj::register_err("ctp", 47, "CTP:预埋（撤单）单已经删除");
    // hj::register_err("ctp", 48, "CTP:无效的投资者或者密码");
    // hj::register_err("ctp", 49, "CTP:不合法的登录IP地址");
    // hj::register_err("ctp", 50, "CTP:平今仓位不足");
    // hj::register_err("ctp", 51, "CTP:平昨仓位不足");
    // hj::register_err("ctp", 52, "CTP:经纪公司没有足够可用的条件单数量");
    // hj::register_err("ctp", 53, "CTP:投资者没有足够可用的条件单数量");
    // hj::register_err("ctp", 54, "CTP:经纪公司不支持条件单");
    // hj::register_err("ctp", 55, "CTP:重发未知单经纪公司/投资者不匹配");
    // hj::register_err("ctp", 56, "CTP:同步动态令牌失败");
    // hj::register_err("ctp", 57, "CTP:动态令牌校验错误");
    // hj::register_err("ctp", 58, "CTP:找不到动态令牌配置信息");
    // hj::register_err("ctp", 59, "CTP:不支持的动态令牌类型");
    // hj::register_err("ctp", 60, "CTP:用户在线会话超出上限");
    // hj::register_err("ctp", 61, "CTP:该交易所不支持套利/做市商类型报单");
    // hj::register_err("ctp", 62, "CTP:没有条件单交易权限");
    // hj::register_err("ctp", 63, "CTP:客户端认证失败");
    // hj::register_err("ctp", 64, "CTP:客户端未认证");
    // hj::register_err("ctp", 65, "CTP:该合约不支持互换类型报单");
    // hj::register_err("ctp", 66, "CTP:该期权合约只支持投机类型报单");
    // hj::register_err("ctp", 67, "CTP:执行宣告错误，不允许重复执行");
    // hj::register_err("ctp", 68, "CTP:重发未知执行宣告经纪公司/投资者不匹配");
    // hj::register_err("ctp", 69, "CTP:只有期货期权合约可执行");
    // hj::register_err("ctp", 70, "CTP:该期权合约不支持执行");
    // hj::register_err("ctp", 71, "CTP:执行宣告字段有误");
    // hj::register_err("ctp", 72, "CTP:撤单已报送，不允许重复撤单");
    // hj::register_err("ctp", 73, "CTP:执行宣告撤单找不到相应执行宣告");
    // hj::register_err("ctp", 74, "CTP:执行仓位不足");
    // hj::register_err("ctp", 75, "CTP:连续登录失败次数超限，登录被禁止");
    // hj::register_err("ctp", 76, "CTP:非法银期代理关系");
    // hj::register_err("ctp", 77, "CTP:无此功能");
    // hj::register_err("ctp", 78, "CTP:发送报单失败");
    // hj::register_err("ctp", 79, "CTP:发送报单操作失败");
    // hj::register_err("ctp", 80, "CTP:交易所不支持的价格类型");
    // hj::register_err("ctp", 81, "CTP:错误的执行类型");
    // hj::register_err("ctp", 82, "CTP:无效的组合合约");
    // hj::register_err("ctp", 83, "CTP:该合约不支持询价");
    // hj::register_err("ctp", 84, "CTP:重发未知报价经纪公司/投资者不匹配");
    // hj::register_err("ctp", 85, "CTP:该合约不支持报价");
    // hj::register_err("ctp", 86, "CTP:报价撤单找不到相应报价");
    // hj::register_err("ctp", 87, "CTP:该期权合约不支持放弃执行");
    // hj::register_err("ctp", 88, "CTP:该组合期权合约只支持IOC");
    // hj::register_err("ctp", 89, "CTP:打开文件失败");
    // hj::register_err("ctp", 90, "CTP：查询未就绪，请稍后重试");
    // hj::register_err("ctp", 91, "CTP：交易所返回的错误");
    // hj::register_err("ctp", 92, "CTP:报价衍生单要等待交易所返回才能撤单");
    // hj::register_err("ctp", 93, "CTP:找不到组合合约映射");
    // hj::register_err("ctp", 94, "CTP:不允许撤销OTC衍生报单");
    // hj::register_err("ctp", 95, "CTP：不支持的价格");
    // hj::register_err("ctp", 96, "CTP:找不到SPBM期货合约参数");
    // hj::register_err("ctp", 97, "CTP:找不到SPBM期权合约参数");
    // hj::register_err("ctp", 98, "CTP:找不到SPBM品种内对锁仓折扣参数");
    // hj::register_err("ctp", 99, "CTP:找不到RULE合约参数");
    // hj::register_err("ctp", 100, "CTP:找不到RULE品种内对锁仓折扣参数");
    // hj::register_err("ctp", 101, "CTP:用户在本系统没有报单权限");
    // hj::register_err("ctp", 102, "CTP:系统缺少灾备标示号");
    // hj::register_err("ctp", 103, "CTP:该交易所不支持批量撤单");
    // hj::register_err("ctp", 106, "CTP:投资者限仓");
    // hj::register_err("ctp", 113, "CTP:当前时间禁止询价");
    // hj::register_err("ctp", 114, "CTP:当前价差禁止询价");
    // hj::register_err("ctp", 116, "CTP:下单频率限制");
    // hj::register_err("ctp",
    //                  131,
    //                  "CTP：您当前密码为弱密码，请修改成强密码后重新登录");
    // hj::register_err("ctp", 132, "CTP：您输入的密码过于简单");
    // hj::register_err("ctp", 139, "CTP:当前时间禁止行权");
    // hj::register_err("ctp",
    //                  140,
    //                  "CTP:首次登录必须修改密码，请修改密码后重新登录");
    // hj::register_err("ctp", 141, "CTP:您当前密码已过期，请修改后登录");
    // hj::register_err("ctp", 142, "CTP:修改密码失败。新密码不允许与旧密码相同");
    // hj::register_err("ctp", 143, "CTP:您登录失败次数过多，IP被禁止登入CTP");
    // hj::register_err("ctp", 144, "CTP:您当前IP在黑名单中，被禁止登录和认证");
    // hj::register_err("ctp", 145, "CTP:终端在本系统没有认证权限");
    // hj::register_err("ctp", 146, "CTP:缺少InvestorID字段，请填入InvestorID");
    // hj::register_err("ctp", 147, "CTP:缺少ExchangeID字段，请填入ExchangeID");
    // hj::register_err("ctp",
    //                  148,
    //                  "CTP:无效的ExchangeID字段，请填入正确的ExchangeID");
    // hj::register_err("ctp", 149, "CTP:缺少AccountID字段，请填入AccountID");
    // hj::register_err("ctp", 150, "CTP:交易所代码错误");
    // hj::register_err("ctp", 151, "CTP:删除拆分组合指令：没有找到该记录");
    // hj::register_err("ctp",
    //                  152,
    //                  "CTP:删除拆分组合指令：原指令需要等待30s 才能删除");
    // hj::register_err("ctp", 153, "CTP:拆分组合钱不足");
    // hj::register_err("ctp", 154, "CTP:查询核心忙 请稍后重试");
    // hj::register_err("ctp", 155, "CTP:未连接监控中心");
    // hj::register_err(
    //     "ctp",
    //     156,
    //     "CTP:平期权多头后资金为负（收益小于平仓手续费），只可由风控人员强平");
    // hj::register_err("ctp", 157, "CTP:该交易所不支持撤销未知单");
    // hj::register_err("ctp", 158, "CTP:超过信息量限制");
    // hj::register_err("ctp", 159, "CTP:超过个人预埋单最大量限制");
    // hj::register_err("ctp", 160, "CTP:超过经纪公司预埋单最大量限制");
    // hj::register_err("ctp", 161, "CTP:预埋单:不支持的触发类型");
    // hj::register_err("ctp", 162, "CTP:产品不在可以交易的阶段");
    // hj::register_err("ctp", 163, "CTP:报单价格不在涨跌停板价范围内");
    // hj::register_err("ctp", 164, "CTP:下单数量不符合交易所规范");
    // hj::register_err("ctp", 165, "CTP:报单价格非最小变动价位整数倍");
    // hj::register_err("ctp", 2000, "CTP:该报盘未连接到银行");
    // hj::register_err("ctp", 2001, "CTP:资金密码错误");
    // hj::register_err("ctp", 2004, "CTP:银行流水号重复");
    // hj::register_err("ctp", 2005, "CTP:报盘流水号重复");
    // hj::register_err("ctp", 2006, "CTP:被冲正流水不存在(冲正交易)");
    // hj::register_err("ctp", 2007, "CTP:原流水已冲正(冲正交易)");
    // hj::register_err("ctp", 2008, "CTP:与原流水信息不符(冲正交易)");
    // hj::register_err("ctp", 2009, "CTP:证件号码或类型错误");
    // hj::register_err("ctp", 2011, "CTP:资金账户不存在");
    // hj::register_err("ctp", 2012, "CTP:资金账户已经销户");
    // hj::register_err("ctp", 2013, "CTP:该交易不能执行手工冲正");
    // hj::register_err("ctp", 2014, "CTP:转帐金额错误");
    // hj::register_err("ctp", 2015, "CTP:找不到汇率");
    // hj::register_err("ctp", 2016, "CTP:找不到预约开户请求");
    // hj::register_err("ctp", 2017, "CTP:重复的预约开户请求");
    // hj::register_err("ctp",
    //                  2018,
    //                  "CTP:银行内部错误,需要找银行确认成功还是失败");
    // hj::register_err("ctp", 999999, "CTP:等待银期报盘处理结果");
    // hj::register_err("ctp", 2019, "CTP:转账卡号非预留银行账户");
    // hj::register_err("ctp", 2050, "建行银期：密码与认证(业务错误)");
    // hj::register_err("ctp", 2051, "建行银期：数量与限额(业务错误)");
    // hj::register_err("ctp", 2052, "建行银期：权限控制(业务错误)");
    // hj::register_err("ctp",
    //                  2053,
    //                  "建行银期：信息滥缺(业务错误)或者数据内容相关(技术错误)");
    // hj::register_err("ctp", 2054, "建行银期：内容非法(业务错误)");
    // hj::register_err("ctp", 2055, "建行银期：重复交易(业务错误)");
    // hj::register_err("ctp", 2056, "建行银期： 时间与期限(业务错误)");
    // hj::register_err("ctp", 2057, "建行银期：风险控制(业务错误)");
    // hj::register_err("ctp", 2058, "建行银期：业务逻辑(业务错误)");
    // hj::register_err("ctp", 2059, "建行银期： 不确定交易结果(技术错误)");
    // hj::register_err("ctp", 2060, "建行银期： 硬件错误(技术错误)");
    // hj::register_err("ctp", 2062, "建行银期： 读写相关(技术错误)");
    // hj::register_err("ctp", 2063, "建行银期： 数据库相关(技术错误)");
    // hj::register_err("ctp", 2064, "建行银期：网络通讯(技术错误)");
    // hj::register_err("ctp", 2065, "建行银期：安全服务(技术错误)");
    // hj::register_err("ctp", 2066, "建行银期： 组件模块(技术错误)");
    // hj::register_err("ctp", 2067, "建行银期：流量控制(技术错误)");
    // hj::register_err("ctp", 2069, "建行银期：技术逻辑(技术错误)");
    // hj::register_err("ctp", 2070, "建行银期：纯技术性错误(技术错误)");
    // hj::register_err("ctp", 3001, "CTP:银期换汇：取平台流水号错误");
    // hj::register_err("ctp", 3002, "CTP:银期换汇：不合法的转账银行");
    // hj::register_err("ctp", 3005, "CTP:银期换汇：处理中");
    // hj::register_err("ctp", 3006, "CTP:银期换汇：交易超时");
    // hj::register_err("ctp", 3007, "CTP:银期换汇：找不到记录");
    // hj::register_err("ctp", 3009, "CTP:银期换汇：连接主机失败");
    // hj::register_err("ctp", 3010, "CTP:银期换汇：发送失败");
    // hj::register_err("ctp", 3011, "CTP:银期换汇：迟到应答");
    // hj::register_err("ctp", 3017, "CTP:银期换汇：数据库操作错误");
    // hj::register_err("ctp", 3019, "CTP:银期换汇：没有签到");
    // hj::register_err("ctp", 3020, "CTP:银期换汇：已经签到");
    // hj::register_err("ctp", 3021, "CTP:银期换汇：金额或次数超限");
    // hj::register_err("ctp", 3022, "CTP:银期换汇：这一时间段不能换汇");
    // hj::register_err("ctp", 3023, "CTP:银期换汇：银行主机错");
    // hj::register_err("ctp", 3026, "CTP:银期换汇：机构没有签约");
    // hj::register_err("ctp", 3030, "CTP:银期换汇：换汇系统忙，稍后再试");
    // hj::register_err("ctp", 3035, "CTP:银期换汇：该币种代码不支持");
    // hj::register_err("ctp", 3036, "CTP:银期换汇：银行帐号不正确");
    // hj::register_err("ctp", 3037, "CTP:银期换汇：银行帐户余额不足");
    // hj::register_err("ctp", 3038, "CTP:银期换汇：凭证号重复");
    // hj::register_err("ctp", 3039, "CTP: 不支持该API版本");
    // hj::register_err("ctp", 3040, "CTP: 无效的API KEY");
    // hj::register_err("ctp", 3041, "CTP:期权对冲,履约对冲:非期权合约");
    // hj::register_err("ctp", 3042, "CTP:期权对冲,履约对冲:请求引用不合法");
    // hj::register_err("ctp", 3043, "CTP:期权对冲,履约对冲:非法字段 ");
    // hj::register_err("ctp", 3044, "CTP:期权对冲,履约对冲:撤销未找到记录");
    // hj::register_err("ctp",
    //                  3045,
    //                  "CTP:期权对冲,履约对冲:对冲状态不对，不能撤销");
    // hj::register_err("ctp",
    //                  3046,
    //                  "CTP:期权对冲,履约对冲:不能重复设置，只能先撤销再设置");
    // hj::register_err("ctp", 3047, "CTP:报价不支持该投机套保类型");
    // hj::register_err("ctp", 4040, "CTP:API Front shake hand err");
    // hj::register_err("ctp", 4041, "CTP:DUPLICATE_SUBMIT");
    // hj::register_err("ctp", 4042, "CTP:IP授权验证失败");
    // hj::register_err("ctp", 4043, "CTP:用户与客户端授权验证失败");
    // hj::register_err("ctp", 4050, "CTP:报价指定的顶单编号不合法（中金所）");
    // hj::register_err("ctp", 4060, "CTP:您认证失败次数过多，IP进入认证禁止列表");
    // hj::register_err("ctp", 4061, "CTP:未满足质押配比要求");
    // hj::register_err("ctp", 4100, "CTP:SSL Connect Error.");
    // hj::register_err("ctp", 4101, "CTP:Wrong User ID or Name.");
    // hj::register_err("ctp", 4102, "CTP:Cert Verify Failed.");
    // hj::register_err("ctp", 4103, "CTP:Cert Process Timeout.");
    // hj::register_err("ctp", 4104, "CTP:Login Error.");
    // hj::register_err("ctp", 4105, "CTP:SSL Connect Timeout.");
    // hj::register_err("ctp", 4106, "CTP:Cert Connect Error.");
    // hj::register_err("ctp", 4107, "CTP:Cert Is Not Existed.");
    // hj::register_err("ctp", 4108, "CTP:Cert Is Expired.");
    // hj::register_err("ctp", 4109, "CTP:PIN Is Not Corrected.");
    // hj::register_err("ctp", 4110, "CTP:PIN Is Locked.");
    // hj::register_err("ctp", 4111, "CTP:SMApi Load Error.");
    // hj::register_err("ctp", 5000, "CTP:找不到RCAMS产品组合信息");
    // hj::register_err("ctp", 5001, "CTP:找不到RCAMS空头期权风险调整参数");
    // hj::register_err("ctp", 5002, "CTP:系统忙");
    // hj::register_err("ctp",
    //                  5050,
    //                  "CTP:银期转账：非银期中心不支持二级代理商转账和查询");
    // hj::register_err("ctp", 5051, "CTP:序号字段重复");
    // hj::register_err("ctp", 6000, "CTP:sub too many insts");
    // hj::register_err("ctp", 6001, "CTP:对冲的合约/产品设置不合法");
    // hj::register_err("ctp", 6002, "CTP:对冲的数量设置不合法");
    // hj::register_err("ctp", 6004, "CTP:对冲设置不能重复提交，需要先撤销再设置");
    // hj::register_err("ctp", 6005, "CTP:撤销对冲设置未找到记录");
    // hj::register_err("ctp", 6006, "CTP:对冲状态不对，不能撤销");
    // register ctp error codes end

    // register our error codes start
    hj::register_err("ctp", 0x10000, "read config failed");
    hj::register_err("ctp", 0x10001, "invalid config name");

    hj::register_err("ctp", 0x11000, "log fail");
    hj::register_err("ctp", 0x11001, "log file size too small");
    hj::register_err("ctp", 0x11002, "log file size too big");
    hj::register_err("ctp", 0x11003, "log file num too small");
    hj::register_err("ctp", 0x11004, "log file num too big");
    hj::register_err("ctp", 0x11005, "log level too small");
    hj::register_err("ctp", 0x11006, "log level too big");

    hj::register_err("ctp", 0x12000, "crash fail");
    hj::register_err("ctp", 0x12001, "crash path permission denied");

    hj::register_err("ctp", 0x13000, "ctp fail");
    hj::register_err("ctp", 0x13001, "ctp addr empty");
    hj::register_err("ctp", 0x13002, "ctp addr invalid");
    hj::register_err("ctp", 0x13003, "ctp flow market data path empty");
    hj::register_err("ctp", 0x13004, "ctp create flow market data path fail");
    hj::register_err("ctp", 0x13005, "ctp null");
    hj::register_err("ctp", 0x13006, "ctp status error");
    hj::register_err("ctp", 0x13007, "ctp login fail");
    hj::register_err("ctp", 0x13008, "ctp login timeout");
    hj::register_err("ctp", 0x13009, "ctp make market data api fail");
    hj::register_err("ctp", 0x13010, "ctp connect timeout");
    hj::register_err("ctp", 0x13011, "ctp already disconnected");
    hj::register_err("ctp", 0x13012, "ctp too much unhandled request");
    hj::register_err("ctp", 0x13013, "ctp too much request");
    hj::register_err("ctp", 0x13014, "ctp read fail");
    hj::register_err("ctp", 0x13015, "ctp write fail");
    hj::register_err("ctp", 0x13016, "ctp heartbeat timeout");
    hj::register_err("ctp", 0x13017, "ctp heartbeat fail");
    hj::register_err("ctp", 0x13018, "ctp receive invalid message");
    hj::register_err("ctp", 0x13019, "ctp mdapi fail");
    // register our error codes end
);

namespace error
{
// make ctp error codes start

// CTP standard error codes (from error.xml)
// static const err_t INVALID_DATA_SYNC_STATUS      = hj::make_err(1, "ctp");
// static const err_t INCONSISTENT_INFORMATION      = hj::make_err(2, "ctp");
// static const err_t INVALID_LOGIN                 = hj::make_err(3, "ctp");
// static const err_t USER_NOT_ACTIVE               = hj::make_err(4, "ctp");
// static const err_t DUPLICATE_LOGIN               = hj::make_err(5, "ctp");
// static const err_t NOT_LOGIN_YET                 = hj::make_err(6, "ctp");
// static const err_t NOT_INITED                    = hj::make_err(7, "ctp");
// static const err_t FRONT_NOT_ACTIVE              = hj::make_err(8, "ctp");
// static const err_t NO_PRIVILEGE                  = hj::make_err(9, "ctp");
// static const err_t CHANGE_OTHER_PASSWORD         = hj::make_err(10, "ctp");
// static const err_t USER_NOT_FOUND                = hj::make_err(11, "ctp");
// static const err_t BROKER_NOT_FOUND              = hj::make_err(12, "ctp");
// static const err_t INVESTOR_NOT_FOUND            = hj::make_err(13, "ctp");
// static const err_t OLD_PASSWORD_MISMATCH         = hj::make_err(14, "ctp");
// static const err_t BAD_FIELD                     = hj::make_err(15, "ctp");
// static const err_t INSTRUMENT_NOT_FOUND          = hj::make_err(16, "ctp");
// static const err_t INSTRUMENT_NOT_TRADING        = hj::make_err(17, "ctp");
// static const err_t NOT_EXCHANGE_PARTICIPANT      = hj::make_err(18, "ctp");
// static const err_t INVESTOR_NOT_ACTIVE           = hj::make_err(19, "ctp");
// static const err_t NOT_EXCHANGE_CLIENT           = hj::make_err(20, "ctp");
// static const err_t NO_VALID_TRADER_AVAILABLE     = hj::make_err(21, "ctp");
// static const err_t DUPLICATE_ORDER_REF           = hj::make_err(22, "ctp");
// static const err_t BAD_ORDER_ACTION_FIELD        = hj::make_err(23, "ctp");
// static const err_t DUPLICATE_ORDER_ACTION_REF    = hj::make_err(24, "ctp");
// static const err_t ORDER_NOT_FOUND               = hj::make_err(25, "ctp");
// static const err_t INSUITABLE_ORDER_STATUS       = hj::make_err(26, "ctp");
// static const err_t UNSUPPORTED_FUNCTION          = hj::make_err(27, "ctp");
// static const err_t NO_TRADING_RIGHT              = hj::make_err(28, "ctp");
// static const err_t CLOSE_ONLY                    = hj::make_err(29, "ctp");
// static const err_t OVER_CLOSE_POSITION           = hj::make_err(30, "ctp");
// static const err_t INSUFFICIENT_MONEY            = hj::make_err(31, "ctp");
// static const err_t DUPLICATE_PK                  = hj::make_err(32, "ctp");
// static const err_t CANNOT_FIND_PK                = hj::make_err(33, "ctp");
// static const err_t CAN_NOT_INACTIVE_BROKER       = hj::make_err(34, "ctp");
// static const err_t BROKER_SYNCHRONIZING          = hj::make_err(35, "ctp");
// static const err_t BROKER_SYNCHRONIZED           = hj::make_err(36, "ctp");
// static const err_t SHORT_SELL                    = hj::make_err(37, "ctp");
// static const err_t INVALID_SETTLEMENT_REF        = hj::make_err(38, "ctp");
// static const err_t CFFEX_NETWORK_ERROR           = hj::make_err(39, "ctp");
// static const err_t CFFEX_OVER_REQUEST            = hj::make_err(40, "ctp");
// static const err_t CFFEX_OVER_REQUEST_PER_SECOND = hj::make_err(41, "ctp");
// static const err_t SETTLEMENT_INFO_NOT_CONFIRMED = hj::make_err(42, "ctp");
// static const err_t DEPOSIT_NOT_FOUND             = hj::make_err(43, "ctp");
// static const err_t EXCHANG_TRADING               = hj::make_err(44, "ctp");
// static const err_t PARKEDORDER_NOT_FOUND         = hj::make_err(45, "ctp");
// static const err_t PARKEDORDER_HASSENDED         = hj::make_err(46, "ctp");
// static const err_t PARKEDORDER_HASDELETE         = hj::make_err(47, "ctp");
// static const err_t INVALID_INVESTORIDORPASSWORD  = hj::make_err(48, "ctp");
// static const err_t INVALID_LOGIN_IPADDRESS       = hj::make_err(49, "ctp");
// static const err_t OVER_CLOSETODAY_POSITION      = hj::make_err(50, "ctp");
// static const err_t OVER_CLOSEYESTERDAY_POSITION  = hj::make_err(51, "ctp");
// static const err_t BROKER_NOT_ENOUGH_CONDORDER   = hj::make_err(52, "ctp");
// static const err_t INVESTOR_NOT_ENOUGH_CONDORDER = hj::make_err(53, "ctp");
// static const err_t BROKER_NOT_SUPPORT_CONDORDER  = hj::make_err(54, "ctp");
// static const err_t RESEND_ORDER_BROKERINVESTOR_NOTMATCH =
//     hj::make_err(55, "ctp");
// static const err_t SYC_OTP_FAILED                 = hj::make_err(56, "ctp");
// static const err_t OTP_MISMATCH                   = hj::make_err(57, "ctp");
// static const err_t OTPPARAM_NOT_FOUND             = hj::make_err(58, "ctp");
// static const err_t UNSUPPORTED_OTPTYPE            = hj::make_err(59, "ctp");
// static const err_t SINGLEUSERSESSION_EXCEED_LIMIT = hj::make_err(60, "ctp");
// static const err_t EXCHANGE_UNSUPPORTED_ARBITRAGE = hj::make_err(61, "ctp");
// static const err_t NO_CONDITIONAL_ORDER_RIGHT     = hj::make_err(62, "ctp");
// static const err_t AUTH_FAILED                    = hj::make_err(63, "ctp");
// static const err_t NOT_AUTHENT                    = hj::make_err(64, "ctp");
// static const err_t SWAPORDER_UNSUPPORTED          = hj::make_err(65, "ctp");
// static const err_t OPTIONS_ONLY_SUPPORT_SPEC      = hj::make_err(66, "ctp");
// static const err_t DUPLICATE_EXECORDER_REF        = hj::make_err(67, "ctp");
// static const err_t RESEND_EXECORDER_BROKERINVESTOR_NOTMATCH =
//     hj::make_err(68, "ctp");
// static const err_t EXECORDER_NOTOPTIONS            = hj::make_err(69, "ctp");
// static const err_t OPTIONS_NOT_SUPPORT_EXEC        = hj::make_err(70, "ctp");
// static const err_t BAD_EXECORDER_ACTION_FIELD      = hj::make_err(71, "ctp");
// static const err_t DUPLICATE_EXECORDER_ACTION_REF  = hj::make_err(72, "ctp");
// static const err_t EXECORDER_NOT_FOUND             = hj::make_err(73, "ctp");
// static const err_t OVER_EXECUTE_POSITION           = hj::make_err(74, "ctp");
// static const err_t LOGIN_FORBIDDEN                 = hj::make_err(75, "ctp");
// static const err_t INVALID_TRANSFER_AGENT          = hj::make_err(76, "ctp");
// static const err_t NO_FOUND_FUNCTION               = hj::make_err(77, "ctp");
// static const err_t SEND_EXCHANGEORDER_FAILED       = hj::make_err(78, "ctp");
// static const err_t SEND_EXCHANGEORDERACTION_FAILED = hj::make_err(79, "ctp");
// static const err_t PRICETYPE_NOTSUPPORT_BYEXCHANGE = hj::make_err(80, "ctp");
// static const err_t BAD_EXECUTE_TYPE                = hj::make_err(81, "ctp");
// static const err_t BAD_OPTION_INSTR                = hj::make_err(82, "ctp");
// static const err_t INSTR_NOTSUPPORT_FORQUOTE       = hj::make_err(83, "ctp");
// static const err_t RESEND_QUOTE_BROKERINVESTOR_NOTMATCH =
//     hj::make_err(84, "ctp");
// static const err_t INSTR_NOTSUPPORT_QUOTE         = hj::make_err(85, "ctp");
// static const err_t QUOTE_NOT_FOUND                = hj::make_err(86, "ctp");
// static const err_t OPTIONS_NOT_SUPPORT_ABANDON    = hj::make_err(87, "ctp");
// static const err_t COMBOPTIONS_SUPPORT_IOC_ONLY   = hj::make_err(88, "ctp");
// static const err_t OPEN_FILE_FAILED               = hj::make_err(89, "ctp");
// static const err_t NEED_RETRY                     = hj::make_err(90, "ctp");
// static const err_t EXCHANGE_RTNERROR              = hj::make_err(91, "ctp");
// static const err_t QUOTE_DERIVEDORDER_ACTIONERROR = hj::make_err(92, "ctp");
// static const err_t INSTRUMENTMAP_NOT_FOUND        = hj::make_err(93, "ctp");
// static const err_t CANCELLATION_OF_OTC_DERIVED_ORDER_NOT_ALLOWED =
//     hj::make_err(94, "ctp");
// static const err_t BAD_PRICE_VALUE                  = hj::make_err(95, "ctp");
// static const err_t SPBMFUTPARAM_NOT_FOUND           = hj::make_err(96, "ctp");
// static const err_t SPBMOPTPARAM_NOT_FOUND           = hj::make_err(97, "ctp");
// static const err_t SPBMINTRAPARAM_NOT_FOUND         = hj::make_err(98, "ctp");
// static const err_t RULEINSTRPARAM_NOT_FOUND         = hj::make_err(99, "ctp");
// static const err_t RULEINTRAPARAM_NOT_FOUND         = hj::make_err(100, "ctp");
// static const err_t NO_TRADING_RIGHT_IN_SEPC_DR      = hj::make_err(101, "ctp");
// static const err_t NO_DR_NO                         = hj::make_err(102, "ctp");
// static const err_t BATCHACTION_NOSUPPORT            = hj::make_err(103, "ctp");
// static const err_t POSI_LIMIT                       = hj::make_err(106, "ctp");
// static const err_t OUT_OF_TIMEINTERVAL              = hj::make_err(113, "ctp");
// static const err_t OUT_OF_PRICEINTERVAL             = hj::make_err(114, "ctp");
// static const err_t ORDER_FREQ_LIMIT                 = hj::make_err(116, "ctp");
// static const err_t WEAK_PASSWORD                    = hj::make_err(131, "ctp");
// static const err_t SIMPLE_PASSWORD                  = hj::make_err(132, "ctp");
// static const err_t EXEC_FORBIDDEN_TIME              = hj::make_err(139, "ctp");
// static const err_t FIRST_LOGIN                      = hj::make_err(140, "ctp");
// static const err_t PWD_OUT_OF_DATE                  = hj::make_err(141, "ctp");
// static const err_t PWD_MUST_DIFF                    = hj::make_err(142, "ctp");
// static const err_t IP_FORBIDDEN                     = hj::make_err(143, "ctp");
// static const err_t IP_BLACK                         = hj::make_err(144, "ctp");
// static const err_t NO_AUTH_RIGHT_IN_SEPC_DR         = hj::make_err(145, "ctp");
// static const err_t INVESTOR_ID_IS_MISSING           = hj::make_err(146, "ctp");
// static const err_t EXCHANGE_ID_IS_MISSING           = hj::make_err(147, "ctp");
// static const err_t EXCHANGE_ID_IS_INVALID           = hj::make_err(148, "ctp");
// static const err_t ACCOUNT_ID_IS_MISSING            = hj::make_err(149, "ctp");
// static const err_t EXCHANGE_ID_IS_WRONG             = hj::make_err(150, "ctp");
// static const err_t DEL_COMB_ACTION_NO_REC           = hj::make_err(151, "ctp");
// static const err_t DEL_COMB_ACTION_TOO_FAST         = hj::make_err(152, "ctp");
// static const err_t COMB_ACTION_SHORT_MONEY          = hj::make_err(153, "ctp");
// static const err_t QK_BUSY                          = hj::make_err(154, "ctp");
// static const err_t CFMMC_NO_CONNECTION              = hj::make_err(155, "ctp");
// static const err_t CLOSE_OPTION_NO_MONEY            = hj::make_err(156, "ctp");
// static const err_t CANCEL_UNKNOWN_ORDER_UNSUPPORTED = hj::make_err(157, "ctp");
// static const err_t OVER_INFO_CNT_LIMIT              = hj::make_err(158, "ctp");
// static const err_t OVER_INVST_PARKED_ORDER_LIMIT    = hj::make_err(159, "ctp");
// static const err_t OVER_BROKER_PARKED_ORDER_LIMIT   = hj::make_err(160, "ctp");
// static const err_t PARKED_ORDER_WRONG_TYPE          = hj::make_err(161, "ctp");
// static const err_t NOT_TRADING_PERIOD               = hj::make_err(162, "ctp");
// static const err_t PRICE_OVER_LIMIT                 = hj::make_err(163, "ctp");
// static const err_t VOLUME_NOT_VALID                 = hj::make_err(164, "ctp");
// static const err_t PRICE_WRONG_TICK                 = hj::make_err(165, "ctp");
// static const err_t SEND_INSTITUTION_CODE_ERROR      = hj::make_err(1000, "ctp");
// static const err_t NO_GET_PLATFORM_SN               = hj::make_err(1001, "ctp");
// static const err_t ILLEGAL_TRANSFER_BANK            = hj::make_err(1002, "ctp");
// static const err_t ALREADY_OPEN_ACCOUNT             = hj::make_err(1003, "ctp");
// static const err_t NOT_OPEN_ACCOUNT                 = hj::make_err(1004, "ctp");
// static const err_t PROCESSING                       = hj::make_err(1005, "ctp");
// static const err_t OVERTIME                         = hj::make_err(1006, "ctp");
// static const err_t RECORD_NOT_FOUND                 = hj::make_err(1007, "ctp");
// static const err_t NO_FOUND_REVERSAL_ORIGINAL_TRANSACTION =
//     hj::make_err(1008, "ctp");
// static const err_t CONNECT_HOST_FAILED              = hj::make_err(1009, "ctp");
// static const err_t SEND_FAILED                      = hj::make_err(1010, "ctp");
// static const err_t LATE_RESPONSE                    = hj::make_err(1011, "ctp");
// static const err_t REVERSAL_BANKID_NOT_MATCH        = hj::make_err(1012, "ctp");
// static const err_t REVERSAL_BANKACCOUNT_NOT_MATCH   = hj::make_err(1013, "ctp");
// static const err_t REVERSAL_BROKERID_NOT_MATCH      = hj::make_err(1014, "ctp");
// static const err_t REVERSAL_ACCOUNTID_NOT_MATCH     = hj::make_err(1015, "ctp");
// static const err_t REVERSAL_AMOUNT_NOT_MATCH        = hj::make_err(1016, "ctp");
// static const err_t DB_OPERATION_FAILED              = hj::make_err(1017, "ctp");
// static const err_t SEND_ASP_FAILURE                 = hj::make_err(1018, "ctp");
// static const err_t NOT_SIGNIN                       = hj::make_err(1019, "ctp");
// static const err_t ALREADY_SIGNIN                   = hj::make_err(1020, "ctp");
// static const err_t AMOUNT_OR_TIMES_OVER             = hj::make_err(1021, "ctp");
// static const err_t NOT_IN_TRANSFER_TIME             = hj::make_err(1022, "ctp");
// static const err_t BANK_SERVER_ERROR                = hj::make_err(1023, "ctp");
// static const err_t BANK_SERIAL_IS_REPEALED          = hj::make_err(1024, "ctp");
// static const err_t BANK_SERIAL_NOT_EXIST            = hj::make_err(1025, "ctp");
// static const err_t NOT_ORGAN_MAP                    = hj::make_err(1026, "ctp");
// static const err_t EXIST_TRANSFER                   = hj::make_err(1027, "ctp");
// static const err_t BANK_FORBID_REVERSAL             = hj::make_err(1028, "ctp");
// static const err_t DUP_BANK_SERIAL                  = hj::make_err(1029, "ctp");
// static const err_t FBT_SYSTEM_BUSY                  = hj::make_err(1030, "ctp");
// static const err_t MACKEY_SYNCING                   = hj::make_err(1031, "ctp");
// static const err_t ACCOUNTID_ALREADY_REGISTER       = hj::make_err(1032, "ctp");
// static const err_t BANKACCOUNT_ALREADY_REGISTER     = hj::make_err(1033, "ctp");
// static const err_t DUP_BANK_SERIAL_REDO_OK          = hj::make_err(1034, "ctp");
// static const err_t CURRENCYID_NOT_SUPPORTED         = hj::make_err(1035, "ctp");
// static const err_t INVALID_MAC                      = hj::make_err(1036, "ctp");
// static const err_t NOT_SUPPORT_SECAGENT_BY_BANK     = hj::make_err(1037, "ctp");
// static const err_t PINKEY_SYNCING                   = hj::make_err(1038, "ctp");
// static const err_t SECAGENT_QUERY_BY_CCB            = hj::make_err(1039, "ctp");
// static const err_t BANKACCOUNT_NOT_EMPTY            = hj::make_err(1040, "ctp");
// static const err_t INVALID_RESERVE_OPEN_ACCOUNT     = hj::make_err(1041, "ctp");
// static const err_t OPEN_ACCOUNT_NOT_DEFAULT_ACCOUNT = hj::make_err(1042, "ctp");
// static const err_t BANK_SYSTEM_INTERNAL_ERROR       = hj::make_err(1043, "ctp");
// static const err_t OFFER_LOCALTIME_OFFSET_IS_TOO_LARGE =
//     hj::make_err(1044, "ctp");
// static const err_t FUTURESERIAL_HAS_BEEN_PROCESSED = hj::make_err(1045, "ctp");
// static const err_t SEC_TRANSFER_NOT_AVAILABLE      = hj::make_err(1046, "ctp");
// static const err_t NO_VALID_BANKOFFER_AVAILABLE    = hj::make_err(2000, "ctp");
// static const err_t PASSWORD_MISMATCH               = hj::make_err(2001, "ctp");
// static const err_t DUPLATION_BANK_SERIAL           = hj::make_err(2004, "ctp");
// static const err_t DUPLATION_OFFER_SERIAL          = hj::make_err(2005, "ctp");
// static const err_t SERIAL_NOT_EXSIT                = hj::make_err(2006, "ctp");
// static const err_t SERIAL_IS_REPEALED              = hj::make_err(2007, "ctp");
// static const err_t SERIAL_MISMATCH                 = hj::make_err(2008, "ctp");
// static const err_t IdentifiedCardNo_MISMATCH       = hj::make_err(2009, "ctp");
// static const err_t ACCOUNT_NOT_FUND                = hj::make_err(2011, "ctp");
// static const err_t ACCOUNT_NOT_ACTIVE              = hj::make_err(2012, "ctp");
// static const err_t NOT_ALLOW_REPEAL_BYMANUAL       = hj::make_err(2013, "ctp");
// static const err_t AMOUNT_OUTOFTHEWAY              = hj::make_err(2014, "ctp");
// static const err_t EXCHANGERATE_NOT_FOUND          = hj::make_err(2015, "ctp");
// static const err_t RESERVE_OPEN_ACCOUNT_NOT_FUND   = hj::make_err(2016, "ctp");
// static const err_t DUPLICATE_RESERVE_OPEN_ACCOUNT_NOT_FUND =
//     hj::make_err(2017, "ctp");
// static const err_t BANK_INTERNAL_ERR            = hj::make_err(2018, "ctp");
// static const err_t WAITING_OFFER_RSP            = hj::make_err(999999, "ctp");
// static const err_t TRANSFER_NOT_DEFAULT_ACCOUNT = hj::make_err(2019, "ctp");
// static const err_t PW_PASSWORD                  = hj::make_err(2050, "ctp");
// static const err_t AL_AMOUNT_LIMITATION         = hj::make_err(2051, "ctp");
// static const err_t AC_AUTHORITY_CONTROL         = hj::make_err(2052, "ctp");
// static const err_t DC_DATA_CONTEXT              = hj::make_err(2053, "ctp");
// static const err_t CE_CONTENT_ERROR             = hj::make_err(2054, "ctp");
// static const err_t DO_DUPLICATE_OPERATION       = hj::make_err(2055, "ctp");
// static const err_t TM_TIME                      = hj::make_err(2056, "ctp");
// static const err_t RC_RISK_CONTROL              = hj::make_err(2057, "ctp");
// static const err_t BL_BUSINESS_LOGIC            = hj::make_err(2058, "ctp");
// static const err_t NA_NA                        = hj::make_err(2059, "ctp");
// static const err_t HW_HARDWARE                  = hj::make_err(2060, "ctp");
// static const err_t IO_IO                        = hj::make_err(2062, "ctp");
// static const err_t DB_DATABASE                  = hj::make_err(2063, "ctp");
// static const err_t NC_NETWORK_COMMUNICATION     = hj::make_err(2064, "ctp");
// static const err_t SS_SECURITY_SERVICE          = hj::make_err(2065, "ctp");
// static const err_t CM_COMPONENTS                = hj::make_err(2066, "ctp");
// static const err_t FC_FLOW_CONTROL              = hj::make_err(2067, "ctp");
// static const err_t TL_TECHNICAL_LOGIC           = hj::make_err(2069, "ctp");
// static const err_t AT_ABSOLUTE_TECHNIQUE        = hj::make_err(2070, "ctp");
// static const err_t FBE_NO_GET_PLATFORM_SN       = hj::make_err(3001, "ctp");
// static const err_t FBE_ILLEGAL_TRANSFER_BANK    = hj::make_err(3002, "ctp");
// static const err_t FBE_PROCESSING               = hj::make_err(3005, "ctp");
// static const err_t FBE_OVERTIME                 = hj::make_err(3006, "ctp");
// static const err_t FBE_RECORD_NOT_FOUND         = hj::make_err(3007, "ctp");
// static const err_t FBE_CONNECT_HOST_FAILED      = hj::make_err(3009, "ctp");
// static const err_t FBE_SEND_FAILED              = hj::make_err(3010, "ctp");
// static const err_t FBE_LATE_RESPONSE            = hj::make_err(3011, "ctp");
// static const err_t FBE_DB_OPERATION_FAILED      = hj::make_err(3017, "ctp");
// static const err_t FBE_NOT_SIGNIN               = hj::make_err(3019, "ctp");
// static const err_t FBE_ALREADY_SIGNIN           = hj::make_err(3020, "ctp");
// static const err_t FBE_AMOUNT_OR_TIMES_OVER     = hj::make_err(3021, "ctp");
// static const err_t FBE_NOT_IN_TRANSFER_TIME     = hj::make_err(3022, "ctp");
// static const err_t FBE_BANK_SERVER_ERROR        = hj::make_err(3023, "ctp");
// static const err_t API_UNSUPPORTED_VERSION      = hj::make_err(3039, "ctp");
// static const err_t API_INVALID_KEY              = hj::make_err(3040, "ctp");
// static const err_t OPTION_SELF_CLOSE_NOT_OPTION = hj::make_err(3041, "ctp");
// static const err_t OPTION_SELF_CLOSE_DUPLICATE_REF  = hj::make_err(3042, "ctp");
// static const err_t OPTION_SELF_CLOSE_BAD_FIELD      = hj::make_err(3043, "ctp");
// static const err_t OPTION_SELF_CLOSE_REC_NOT_FOUND  = hj::make_err(3044, "ctp");
// static const err_t OPTION_SELF_CLOSE_STATUS_ERR     = hj::make_err(3045, "ctp");
// static const err_t OPTION_SELF_CLOSE_DOUBLE_SET_ERR = hj::make_err(3046, "ctp");
// static const err_t QUOTE_WRONG_HEDGE_TYPE           = hj::make_err(3047, "ctp");
// static const err_t API_FRONT_SHAKE_HAND_ERR         = hj::make_err(4040, "ctp");
// static const err_t DUPLICATE_SUBMIT                 = hj::make_err(4041, "ctp");
// static const err_t AUTHIP_CHECK_ERR                 = hj::make_err(4042, "ctp");
// static const err_t AUTHUSER_CHECK_ERR               = hj::make_err(4043, "ctp");
// static const err_t QUOTE_WRONG_REPALACE_SYSID       = hj::make_err(4050, "ctp");
// static const err_t AUTH_IP_FORBIDDEN                = hj::make_err(4060, "ctp");
// static const err_t MORTGAGE_NOT_BALANCE             = hj::make_err(4061, "ctp");
// static const err_t SMAPI_SSL_CONNECT_ERR            = hj::make_err(4100, "ctp");
// static const err_t SMAPI_WRONG_USERIDORNAME         = hj::make_err(4101, "ctp");
// static const err_t SMAPI_CERT_VERIFY_FAILED         = hj::make_err(4102, "ctp");
// static const err_t SMAPI_CERT_PROCESS_TIMEOUT       = hj::make_err(4103, "ctp");
// static const err_t SMAPI_LOGIN_ERROR                = hj::make_err(4104, "ctp");
// static const err_t SMAPI_SSL_CONNECT_TIMEOUT        = hj::make_err(4105, "ctp");
// static const err_t SMAPI_CERT_CONNECT_ERROR         = hj::make_err(4106, "ctp");
// static const err_t SMAPI_CERT_NOT_EXIST             = hj::make_err(4107, "ctp");
// static const err_t SMAPI_CERT_EXPIRED               = hj::make_err(4108, "ctp");
// static const err_t SMAPI_PIN_INCORRECT              = hj::make_err(4109, "ctp");
// static const err_t SMAPI_PIN_LOCKED                 = hj::make_err(4110, "ctp");
// static const err_t SMAPI_LOAD_ERROR                 = hj::make_err(4111, "ctp");
// static const err_t RCAMS_COMBPRODUCTINFO_NOT_FOUND  = hj::make_err(5000, "ctp");
// static const err_t RCAMS_SHORTOPTADJUSTPARAM_NOT_FOUND =
//     hj::make_err(5001, "ctp");
// static const err_t TK_BUSY = hj::make_err(5002, "ctp");
// static const err_t NOT_SUPPORT_SECAGENT_BY_SECTRANSFER =
//     hj::make_err(5050, "ctp");
// static const err_t DUP_SEQ                      = hj::make_err(5051, "ctp");
// static const err_t OVER_SUB_INST_LIMIT          = hj::make_err(6000, "ctp");
// static const err_t OFFSET_INSTR_PROD            = hj::make_err(6001, "ctp");
// static const err_t OFFSET_VOLUME                = hj::make_err(6002, "ctp");
// static const err_t OFFSET_SETTING_DOUBLE_SET    = hj::make_err(6004, "ctp");
// static const err_t OFFSET_SETTING_REC_NOT_FOUND = hj::make_err(6005, "ctp");
// static const err_t OFFSET_SETTING_STATUS_ERR    = hj::make_err(6006, "ctp");
// make ctp error codes end

// make our error codes start
static const err_t READ_CONFIG_FAILED = hj::make_err(0x10000, "ctp");

static const err_t LOG_FAIL                = hj::make_err(0x11000, "ctp");
static const err_t LOG_FILE_SIZE_TOO_SMALL = hj::make_err(0x11001, "ctp");
static const err_t LOG_FILE_SIZE_TOO_BIG   = hj::make_err(0x11002, "ctp");
static const err_t LOG_FILE_NUM_TOO_SMALL  = hj::make_err(0x11003, "ctp");
static const err_t LOG_FILE_NUM_TOO_BIG    = hj::make_err(0x11004, "ctp");
static const err_t LOG_LEVEL_TOO_SMALL     = hj::make_err(0x11005, "ctp");
static const err_t LOG_LEVEL_TOO_BIG       = hj::make_err(0x11006, "ctp");

static const err_t CRASH_FAIL                   = hj::make_err(0x12000, "ctp");
static const err_t CRASH_PATH_PERMISSION_DENIED = hj::make_err(0x12001, "ctp");

static const err_t CTP_FAIL                     = hj::make_err(0x13000, "ctp");
static const err_t CTP_ADDR_EMPTY               = hj::make_err(0x13001, "ctp");
static const err_t CTP_ADDR_INVALID             = hj::make_err(0x13002, "ctp");
static const err_t CTP_FLOW_MD_PATH_EMPTY       = hj::make_err(0x13003, "ctp");
static const err_t CTP_CREATE_FLOW_MD_PATH_FAIL = hj::make_err(0x13004, "ctp");
static const err_t CTP_NULL                     = hj::make_err(0x13005, "ctp");
static const err_t CTP_STATUS_ERROR             = hj::make_err(0x13006, "ctp");
static const err_t CTP_LOGIN_FAIL               = hj::make_err(0x13007, "ctp");
static const err_t CTP_LOGIN_TIMEOUT            = hj::make_err(0x13008, "ctp");
static const err_t CTP_MAKE_MDAPI_FAIL          = hj::make_err(0x13009, "ctp");
static const err_t CTP_CONNECT_TIMEOUT          = hj::make_err(0x13010, "ctp");
static const err_t CTP_ALREADY_DISCONNECTED     = hj::make_err(0x13011, "ctp");
static const err_t CTP_TOO_MUCH_UNHANDLED_REQUEST =
    hj::make_err(0x13012, "ctp");
static const err_t CTP_TOO_MUCH_REQUEST  = hj::make_err(0x13013, "ctp");
static const err_t CTP_READ_FAIL         = hj::make_err(0x13014, "ctp");
static const err_t CTP_WRITE_FAIL        = hj::make_err(0x13015, "ctp");
static const err_t CTP_HEARTBEAT_TIMEOUT = hj::make_err(0x13016, "ctp");
static const err_t CTP_HEARTBEAT_FAIL    = hj::make_err(0x13017, "ctp");
static const err_t CTP_RECV_INVALID_MSG  = hj::make_err(0x13018, "ctp");
static const err_t CTP_CREATE_MDAPI_FAIL = hj::make_err(0x13019, "ctp");
// make our error codes end
}

} // namespace livermore::ctp

#endif